* GTK bug
** DONE bug if create a task after change the name of a sub-task
   force Seq to Array
** TODO Resolve problem "é" in text
it's a problem wit h count of utf8 char
* GTK improve

** DONE implement menu accelerator "Alt-f" for File menu
** TODO Short-Cut  "Ctrl-s" forsave
** TODO -> DONE add line with date
** TODO Mode d'emploi
** TODO Move task on the tree
** DONE Read filename on the command line
** TODO Add open file dialog
** DONE Edit text of a task
Accent "é" create problem
Refresh of tree to improve
** TODO Rewrite the refresh tree after edit "text"
** TODO link F11 to maximize the window
** TODO Display only TODO task
** TODO Delete "text" of a task
Presently, it's possible to remove all but a blank line exist enough
** TODO Create a different display for README style or TODO style
* git
** DONE diff ne pas afficher les blancs
   CLOSED: [2020-04-10 ven 12:19]
   git diff -b --ignore-blank-lines
* sed
** DONE mettre debug à 0 avant le push
   sed -i 's/debug=1/debug=0/' org-mode-gtk.raku
* git help
** Diff : Ne pas afficher les blancs
   git diff -b --ignore-blank-lines
** Commit : Do a partial commit
You can use git add --patch 'filename' (or -p for short), and git will begin to break down your file into what it thinks are sensible "hunks" (portions of the file). It will then prompt you with this question:

Stage this hunk [y,n,q,a,d,/,j,J,g,s,e,?]?

Here is a description of each option:

    y stage this hunk for the next commit
    n do not stage this hunk for the next commit
    q quit; do not stage this hunk or any of the remaining hunks
    a stage this hunk and all later hunks in the file
    d do not stage this hunk or any of the later hunks in the file
    g select a hunk to go to
    / search for a hunk matching the given regex
    j leave this hunk undecided, see next undecided hunk
    J leave this hunk undecided, see next hunk
    k leave this hunk undecided, see previous undecided hunk
    K leave this hunk undecided, see previous hunk
    s split the current hunk into smaller hunks
    e manually edit the current hunk
    ? print hunk help

If the file is not in the repository yet, you can first do git add -N 'filename'. Afterwards you can go on with git add -p 'filename'.

Afterwards, you can use:

    git diff --staged to check that you staged the correct changes
    git reset -p to unstage mistakenly added hunks
    git commit -v to view your commit while you edit the commit message.

Note this is far different than the git format-patch command, whose purpose is to parse commit data into a .patch files.
